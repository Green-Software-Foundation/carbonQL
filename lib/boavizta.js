"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoaviztaCpuImpactModel = exports.BoaviztaCloudImpactModel = exports.BoaviztaCpuParams = exports.camelToSnake = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const axios_1 = require("axios");
const camelToSnake = (str) => str.replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`);
exports.camelToSnake = camelToSnake;
class BoaviztaCpuParams {
}
exports.BoaviztaCpuParams = BoaviztaCpuParams;
_a = JSII_RTTI_SYMBOL_1;
BoaviztaCpuParams[_a] = { fqn: "carbonql.BoaviztaCpuParams", version: "1.0.0" };
class BoaviztaCloudImpactModel {
    constructor() {
        this.authCredentials = undefined;
    }
    modelIdentifier() {
        return "boavizta.cloud.sci";
    }
    configure(name, staticParams) {
        const staticParamCast = staticParams;
        if (staticParamCast?.hasOwnProperty('provider')) {
            this.provider = staticParamCast.provider;
        }
        this.name = name;
        return this;
    }
    configureTyped(name, staticParamCast) {
        if (staticParamCast?.hasOwnProperty('provider')) {
            this.provider = staticParamCast.provider;
        }
        this.name = name;
        return this;
    }
    authenticate(authParams) {
        this.authCredentials = authParams;
    }
    async usage(data) {
        const dataCast = data;
        if ('provider' in dataCast) {
            if (this.provider !== undefined) {
                dataCast.provider = this.provider;
            }
            else {
                throw new Error('Malformed Telemetry: Missing provider');
            }
        }
        if ('instance_type' in dataCast) {
            throw new Error('Malformed Telemetry: Missing instance_type');
        }
        const response = await axios_1.default.post('https://api.boavizta.org/v1/cloud/', dataCast);
        return response.data;
    }
}
exports.BoaviztaCloudImpactModel = BoaviztaCloudImpactModel;
_b = JSII_RTTI_SYMBOL_1;
BoaviztaCloudImpactModel[_b] = { fqn: "carbonql.BoaviztaCloudImpactModel", version: "1.0.0" };
class BoaviztaCpuImpactModel {
    constructor() {
        this.componentType = "cpu";
        this.verbose = false;
        this.allocation = "TOTAL";
        this.authCredentials = undefined;
    }
    modelIdentifier() {
        return "boavizta.cpu.sci";
    }
    authenticate(authParams) {
        this.authCredentials = authParams;
    }
    configure(name, staticParams) {
        const staticParamCast = staticParams;
        if ('verbose' in staticParamCast) {
            this.verbose = staticParamCast.verbose ?? false;
            staticParamCast.verbose = undefined;
        }
        if ('allocation' in staticParamCast) {
            this.allocation = staticParamCast.allocation ?? "total";
            staticParamCast.allocation = undefined;
        }
        this.name = name;
        this.sharedParams = staticParamCast;
        return this;
    }
    configureTyped(name, staticParamCast) {
        if ('verbose' in staticParamCast) {
            this.verbose = staticParamCast.verbose ?? false;
            staticParamCast.verbose = undefined;
        }
        if ('allocation' in staticParamCast) {
            this.allocation = staticParamCast.allocation ?? "total";
            staticParamCast.allocation = undefined;
        }
        this.name = name;
        this.sharedParams = staticParamCast;
        return this;
    }
    async usage(data) {
        const usageCast = data;
        let mTotal = 0;
        let eTotal = 0;
        if (Array.isArray(usageCast)) {
            for (const usage of usageCast) {
                const { m, e } = await this.singleUsage(usage);
                mTotal += m;
                eTotal += e;
            }
        }
        else {
            const { m, e } = await this.singleUsage(usageCast);
            mTotal += m;
            eTotal += e;
        }
        return {
            "e": eTotal,
            "m": mTotal
        };
    }
    async singleUsage(usageCast) {
        if (this.sharedParams === undefined) {
            throw new Error("Improper Initialization: Missing configuration parameters");
        }
        const dataCast = Object.assign(this.sharedParams);
        for (let key in dataCast) {
            dataCast[(0, exports.camelToSnake)(key)] = dataCast[key];
            if (/[A-Z]/.test(key)) {
                delete dataCast[key];
            }
        }
        dataCast['usage'] = usageCast;
        console.log(dataCast);
        const response = await axios_1.default.post(`https://api.boavizta.org/v1/component/${this.componentType}?verbose=${this.verbose}&allocation=${this.allocation}`, dataCast);
        console.log(response.data);
        let m = 0;
        let e = 0;
        if ('impacts' in response.data) {
            m = response.data['impacts']['gwp']['manufacture'] * 1000;
            e = response.data['impacts']['pe']['use'] / 3.6;
        }
        else if ('gwp' in response.data && 'pe' in response.data) {
            m = response.data['gwp']['manufacture'] * 1000;
            e = response.data['pe']['use'] / 3.6;
        }
        return {
            "e": e,
            "m": m
        };
    }
}
exports.BoaviztaCpuImpactModel = BoaviztaCpuImpactModel;
_c = JSII_RTTI_SYMBOL_1;
BoaviztaCpuImpactModel[_c] = { fqn: "carbonql.BoaviztaCpuImpactModel", version: "1.0.0" };
//# sourceMappingURL=data:application/json;base64,